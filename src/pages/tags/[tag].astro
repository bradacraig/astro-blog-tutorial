---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';
import type { MarkdownInstance } from 'astro';

// Define the structure of the frontmatter
interface PostFrontmatter {
  title: string;
  tags: string[];
}

// Define the structure of each Post, including URL and frontmatter
interface Post {
  url: string;
  frontmatter: PostFrontmatter;
}

export async function getStaticPaths(): Promise<Array<{ params: { tag: string }, props: { posts: Post[] } }>> {
  // Load all posts as MarkdownInstance, with the frontmatter structure typed correctly
  const allPosts: MarkdownInstance<PostFrontmatter>[] = await Astro.glob('../posts/*.md');

  // Map the posts into the Post type, making sure the url is defined
  const posts: Post[] = allPosts.map((post) => ({
    url: post.url || '', // Ensure URL is not undefined
    frontmatter: post.frontmatter, // Access the frontmatter directly
  }));

  // Extract unique tags
  const uniqueTags = [...new Set(posts.map((post) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag) => {
    const filteredPosts = posts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>